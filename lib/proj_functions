#!/usr/bin/env bash

###
# some bash library helpers
# @author Adam Eivy
###

# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"34;01m"
COL_MAGENTA=$ESC_SEQ"35;01m"
COL_CYAN=$ESC_SEQ"36;01m"

function banner() {
  info '
               _                      _       
  ___ ___   __| | ___ _ __ ___  _ __ (_)_ __  
 / __/ _ \ / _  |/ _ \  __/ _ \|  _ \| |  _ \ 
| (_| (_) | (_| |  __/ | | (_) | | | | | | | |
 \___\___/ \__,_|\___|_|  \___/|_| |_|_|_| |_|
'
}

function ok() { echo -e "$COL_GREEN[ok]$COL_RESET"; }

function bot() { echo -e "\n$COL_GREEN\[._.]/$COL_RESET - $1"; }

function running() { echo -en "$COL_YELLOW ⇒ $COL_RESET $1: "; }

function action() { echo -e "\n$COL_YELLOW[action]:$COL_RESET\n ⇒ $1..."; }

function line() { echo -e "------------------------------------------------------------------------------------"; }

function info() { echo -e "$COL_GREEN $1 $COL_RESET"; }

function warn() { echo -e "$COL_YELLOW $1 $COL_RESET"; }

function error() { echo -e "$COL_RED $1 $COL_RESET "; }

function die() { echo "$@" 1>&2 ; exit 1; }

function git_clone_or_update() {
  if [ -d "$2/.git" ]; then
    action "update $1"
    cd "$2"; git pull > /dev/null 2>&1
    ok
  else
    action "clone $1"
    git clone "$1" "$2" > /dev/null 2>&1 
    ok
  fi
}

function file_writeln {
  # try to ensure we don't create duplicate entries in the .coderonin file
  touch $1
  action "ensure that $2 exists in $1"
  if ! grep -q "$2" "$1"; then
    echo writing
    echo "$2" >> "$1"
  fi
  ok
}

function set_config_var() {
  lua - "$1" "$2" "$3" <<EOF > "$3.bak"
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
  if line:match("^#?%s*"..key.."=.*$") then
    line=key.."="..value
    made_change=true
  end
  print(line)
end

if not made_change then
  print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}